CPSC 2310 Spring 2021
Lab 10 Questions
/*Rob Hughes
 CPSC2310 Lab11
 rbhughe
 Section 5
 */

1. As discussed in the lab writeup, the locations for min and max are 
	-8(%rbq) and -4(%rbq), which are 4 apart. How far apart would these
	addresses be if min and max were chars instead of ints? Why?
	What if they were doubles? 
	(You can test this)

If they were chars, they'd be 1 apart. If they were doubles, they'd be 8 apart. 
This is because an int's size is 4 bytes, a char's size is 1 byte, and a double's size is 8 bytes.

2. Alter the values assigned to min and max in the driver.s file
	| min | max | result
	=======================
	| 0   | 10  | 012345678910
	| 5   | 10  | 5678910
	| 10  | 0   | nothing
	| -5  | 1   | -5-4-3-2-1

3. What are these lines doing in driver.s?

	movl  -8(%rbp), %eax # min, tmp89
   	movl  %eax, -12(%rbp)   # tmp89, i
The first moves min from -8 bytes down from the base stack pointer to the %eax register.
The second stores i in -12 bytes down from the base stack pointer.

4. What happens when you change the jump conditional to jl instead of jle?
	What if you change it to jg? Why?
It only prints to 9.  Because jl is equivalent is < instead of Joe which is <=, meaning the last
Loop is not accepted in the conditional. 
Nothing prints for jg since it is essentially >, which never happens.


5. The last line in .L3 handles the for loop change (i++)
   The third line in .L2  handles the for loop conditional (i < max)
(The first two lines in .L2 handle the initialization, but we won't alter that)
	
Fill in the resulting loop and print out when we change the x86 commands 
(*some of these create infinite loops so testing directly may take awhile, 
try to logic through it first. If there is an infinite loop, write "infinite
loop" as the printout)

	.L3         | .L2  |        for loop             |    printout
===========================================================================
addl  $1, -12(%rbp) | jle  | for(i = min; i <= max; i++) | 0 1 3 4....10
subl  $1, -12(%rbp) | jle  | for(i = min;         ;    ) | infinite loop
addl  $2, -12(%rbp) | jl   | for(i = min;         ;    ) | 02468
mull  $2, -12(%rbp) | jge  | for(i = min;         ;    ) | Error
addl  $1, -8(%rbp)  | jle  | for(i = min;         ;    ) | infinite 0s


6. lsl r4, r3, #2 is the same as r4 = 4 * r3. Explain
It's a left shift, multiplying r4 by 2^2.

   ldr r5, [r0, r4] is the same as r5 = arr[i] in this case. How does this work
r4 is in fact arr[I], and ldr offsets r0 by r4, loading arr[I] into r5.


7. In the beginning of a function in ARM, we push lr onto the stack. At the
   end, we pop that value into pc. Why is this important? What does it 
   accomplish?	
It is essentially a breadcrumb trail.  We push lr onto the stack so that when we are complete, we can return to where we were in the function that called (the return address). This allows us to remember where we were, and go to another function.