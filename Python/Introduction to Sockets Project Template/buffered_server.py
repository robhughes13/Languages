# TODO: Include any necessary import statements
FIXED_LENGTH= 4
from socket import*
from struct import pack, unpack


class BufferedTCPEchoServer(object):
    def __init__(self, host = '', port = 36001, buffer_size = 1024):
        # Save the buffer size to a variable. You'll need this later
        self.buffer_size = buffer_size

        # This variable is used to tell the server when it should shut down. Our implementation of this server is centered
        # around one or more while loops that keeps the server listening for new connection requests and new messages from
        # a connected client. This should continue forever, or until this self.keep_running is set to False. My testing
        # code will use self.keep_running to shutdown the server for one test case 
        self.keep_running = True

        # TODO: Create and bind the server socket

        self.serverSocket= socket(AF_INET, SOCK_STREAM)
        self.serverSocket.setsockopt(SOL_SOCKET, SO_REUSEADDR,1)
        self.serverSocket.bind((host,port))


    # This function starts the server listening for new connections and new messages. It initiates the core loop of our 
    # server, where we loop continuously listening for a new connection, or if we are already connected, listening for a new 
    # message. I recommend breaking the functionality up into helper functions
    # Remember that this server can only talk to one connected client at a time. We'll implement a server that
    # can connect to multiple clients at once in a future project.
    # TODO: * Listen for new connections
    #       * Accept new connections
    #       * Receive messages from the connected client until it disconnects. 
    #           * Be sure to set the bufsize parameter to self.buffer_size when calling the socket's receive function
    #       * When a message is received, remove the first ten characters and then send it back to the client. 
    #           * You can use the slice operator to remove the first 10 characters: shorter_string = my_string_variable[10:] 
    #           * You will need to package the message using the format discussed in the assignment instructions
    #       * On disconnect, attempt to accept a new connection
    #       * This process should continue until self.keep_running is set to False. (The program doesn't need immediately close when the value changes)
    #       * Shutdown the server's socket before exiting the program
    def start(self):

        while self.keep_running:
            print('SERVER: listening...')

            self.serverSocket.listen(1)
            linker, add = self.serverSocket.accept()
            connection = True
            print('New-Connection')

            while connection:
                try:
                    message = linker.recv(FIXED_LENGTH)
                    if message:
                        data = unpack("!I", message)[0]      
                        buffer = b""
                        while len(buffer) < data:
                            changeBuff = min(self.buffer_size, data - len(buffer))
                            message = linker.recv(changeBuff)
                            buffer += message
                        first = buffer.decode()
                        partial = first[10:]
                        print(partial)
                        last = partial.encode()

                        formatMessage = pack("!I" + str(len(partial)) + "s", len(partial), last)
                        linker.send(formatMessage)
                    else: 
                        linker.close()
                        connection = False
                except ConnectionResetError as exc:
                    linker.close()
                    connection = False


    # This method is called by the autograder when it is ready to shut down your program. You should clean up your server socket
    # here. Note that all other sockets opened by the server also need to be closed once you are done with them. You should be closing
    # the individual client sockets generated by socket.accept() inside of your start() function 
    # TODO: Clean up your server socket
    def shutdown(self):
        print("SERVER: shutting down...")
        self.serverSocket.close

if __name__ == "__main__":
    BufferedTCPEchoServer(host='', port=36001, buffer_size=1024).start()